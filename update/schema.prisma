generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum TokenType {
  NATIVE
  wNATIVE // wrapped native token in other chain, e.g. WETH in polygon
  wETH // WETH contract, e.g. WETH in ethereum / WMATIC in polygon
  STABLE
  CRYPTO
  INVESTMENT // e.g. stETH, stMATIC,...

  @@map("tokenType")
}

model Token {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  address         String // checksummed address
  chainId         Int
  decimals        Int
  logoURI         String
  name            String
  priceUSD        Float
  symbol          String
  canonical       String
  display         Boolean   @default(true)
  isolated        Boolean   @default(false)
  tier            Int
  type            TokenType
  coingeckoId     String?
  coinmarketcapId Int?

  lastSyncDate String? // TODO: deprecated last sync date
  priceHistory Float[] @default([]) // price history for 14 days

  color String @default("#000000") // token color for UI

  // relations
  chain      Chain         @relation(fields: [chainId], references: [chainId])
  swaps      SwapToken[]
  invests    InvestToken[]
  bridgeFrom Bridge[]      @relation("bridge_from_token")
  bridgeTo   Bridge[]      @relation("bridge_to_token")

  @@unique([chainId, address])
  @@map("token")
}

model Chain {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
  chainId          Int       @unique
  logoURI          String
  name             String
  symbol           String
  multicallAddress String
  rpcUrls          String[]
  explorer         String
  blockTime        Float

  // relations
  tokens         Token[]
  invests        Invest[]
  swaps          Swap[]
  bridgesFrom    Bridge[]        @relation("bridge_from_chain")
  bridgesTo      Bridge[]        @relation("bridge_to_chain")
  investProjects InvestProject[]
  txs            TxStep[]
  threads        Thread[]

  @@map("chain")
}

enum InvestCategory {
  UniswapV3
  Curve
  Lido
  Compound
  SyncSwap
  Velocore
  Stargate
  Ambient
  AaveV3

  @@map("investCategory")
}

enum InvestType {
  DEX
  LSD
  LENDING
  BRIDGE
}

model Invest {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  deletedAt DateTime?
  display   Boolean        @default(true)
  chainId   Int
  address   String
  sourceApi String         @default("")
  tag       String? // ex. Ambient has only one address but multiple pools so we need to distinguish them by tag( = inputToken0_address_inputToken1_address)
  project   String // UniswapV2, PancakeswapV2, ... 프로젝트 이름
  category  InvestCategory // 어떤 프로젝트의 포크인지. UniswapV2, UniswapV3, ...
  meta      Json           @default("{}") // 프로젝트에 대한 추가 정보
  type      InvestType
  tier      Float
  autoWrap  Boolean        @default(false) // if true, auto wrap native token to wETH -> Swap pool should include wETH
  projectId String         @db.ObjectId

  idAtSubgraph String? // investment id from subgraph

  // dynamic data
  apr           Float    @default(0) // annual percentage rate
  tvlUSD        Float    @default(0) // total value locked
  volumeUSD24H  Float    @default(0) // 24h volume
  volumeUSD7D   Float    @default(0) // 7d volume
  dynamicMeta   Json     @default("{}") // 프로젝트에 대한 추가 정보 
  inputTokenIds String[] @db.ObjectId

  positionCount Int?     @default(0)
  ownerCount    Int?     @default(0)
  inflowCount   Int?     @default(0)
  roiByUSD      Float?   @default(0) // weekly roi by US Dollar
  roiByHold     Float?   @default(0) // weekly roi by token quantity, compare to initial token quantity
  inflowVolume  Float?   @default(0) // inflow - outflow
  returnScore   Float?   @default(0)
  riskScore     Float?   @default(0)
  topPositions  String[]

  // inputAssets, outputAssets are array of address,
  // for prevent redundant relational query
  inputAssets  String[]
  rewardAssets String[]
  outputAssets String[]

  // relations
  chain         Chain         @relation(fields: [chainId], references: [chainId])
  inputTokens   InvestToken[]
  investProject InvestProject @relation(fields: [projectId], references: [id])

  // @@unique([chainId, address])
  @@map("invest")
}

model InvestProject {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  deletedAt   DateTime?
  
  chainId     Int
  name        String
  category    InvestCategory // 어떤 프로젝트의 포크인지. UniswapV2, UniswapV3, ...
  logoURI     String
  sourceApi   String         @default("")
  meta        Json           @default("{}") // 프로젝트에 대한 추가 정보
  subgraphs String[] // 우리가 만든 subgraph

  // relations
  chain   Chain    @relation(fields: [chainId], references: [chainId])
  invests Invest[]

  @@map("investProject")
}

enum SwapCategory {
  UniswapV2
  UniswapV3
  Curve
  SyncSwap
  Velocore
  Ambient

  @@map("swapCategory")
}

model Swap {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  deletedAt DateTime?
  display   Boolean      @default(true)
  chainId   Int
  project   String // Uniswap V2, Pancakeswap V2, ... 프로젝트 이름
  category  SwapCategory // 어떤 프로젝트의 포크인지. UniswapV2, UniswapV3, ...
  fee       Int // 500 => 0.05%, 3000 => 0.3% 
  address   String // holding token address
  sourceApi String? // The graph url  
  meta      Json         @default("{}") // 프로젝트에 대한 추가 정보
  tokens    Json[] // [{id: string, address: "0x...", decimals: 18, symbol: "WETH"}]
  autoWrap  Boolean      @default(false) // if true, auto wrap native token to wETH -> Swap pool should include wETH

  // relations
  chain      Chain       @relation(fields: [chainId], references: [chainId])
  swapTokens SwapToken[]

  @@map("swap")
}

// for M:N relation between Swap and Token
model SwapToken {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  tokenId String @db.ObjectId
  swapId  String @db.ObjectId
  // relations
  token   Token  @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  swap    Swap   @relation(fields: [swapId], references: [id], onDelete: Cascade)

  @@map("swapToken")
}

// for M:N relation between Invest and Token
model InvestToken {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  tokenId  String @db.ObjectId
  investId String @db.ObjectId
  // relations
  token    Token  @relation(fields: [tokenId], references: [id])
  invest   Invest @relation(fields: [investId], references: [id])

  @@map("investToken")
}

model Bridge {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  name    String
  address String // target bridge contract address

  fromChainId       Int
  fromTokenId       String    @db.ObjectId
  fromTokenAddr     String
  fromTokenSymbol   String
  fromTokenType     TokenType
  fromTokenDecimals Int

  toChainId       Int
  toTokenId       String    @db.ObjectId
  toTokenAddr     String
  toTokenSymbol   String
  toTokenType     TokenType
  toTokenDecimals Int

  // relations
  fromChain Chain @relation("bridge_from_chain", fields: [fromChainId], references: [chainId])
  toChain   Chain @relation("bridge_to_chain", fields: [toChainId], references: [chainId])
  fromToken Token @relation("bridge_from_token", fields: [fromTokenId], references: [id])
  toToken   Token @relation("bridge_to_token", fields: [toTokenId], references: [id])

  meta Json @default("{}") // 프로젝트에 대한 추가 정보

  @@map("bridge")
}

enum AdminRole {
  ADMIN
  READ
  WRITE
}

model Admin {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?
  account   String
  roles     AdminRole[]

  @@map("admin")
}

// Deprecated: only for web app
model TxStep {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  chainId       Int
  encodedHash   String   @unique // {chainId}_{txHash}
  blockNumber   Int
  gasUsed       String
  followingHash String? // txHash, if tx is bridge, followingHash is for dst chain
  type          String // swap, invest, bridge, ...
  account       String
  project       String

  inputTokens   String[] // array of input tokens {chainId}_{address}
  inputAmounts  String[] // array of token input amount (human-readable)
  inputUSD      Float // total input USD value
  outputTokens  String[] // array of output tokens: {chainId}_{address}
  outputAmounts String[] // array of token output amount (human-readable)
  outputUSD     Float // total output USD value

  meta        Json   @default("{}")
  threadId    String @db.ObjectId
  threadIndex Int // transaction index in thread

  // relation
  chain  Chain  @relation(fields: [chainId], references: [chainId])
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@unique([threadId, threadIndex])
  @@index([account])
  @@map("txStep")
}

// Deprecated: only for web app
model Thread {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  inputChainIds Int[]
  outputChainId Int
  type          String // swap, invest, bridge, ...
  account       String
  txCount       Int
  doneCount     Int       @default(1) // tx를 1개라도 수행한 스레드만 db에 저장
  project       String

  inputTokens   String[] // array of input tokens {chainId}_{address}
  inputAmounts  String[] // array of token input amount (human-readable)
  inputUSD      Float // total input USD value
  outputTokens  String[] // array of output tokens {chainId}_{address}
  outputAmounts String[] // array of token output amount (human-readable)
  outputUSD     Float // total output USD value

  // relation
  chain Chain    @relation(fields: [outputChainId], references: [chainId])
  steps TxStep[]

  @@index([account])
  @@map("thread")
}

model TokenHistory {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  canonical String
  date      String
  open      Float
  high      Float
  low       Float
  close     Float

  @@unique([canonical, date])
  @@map("tokenHistory")
}

// Thread log for pwa app
model IntentLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  project     String
  tasksLength Int
  done        Boolean

  inputTokenIds String[]
  inputAmounts  Float[]
  inputUSD      Float

  taskLogs TaskLog[]

  @@map("intentLog")
}

model TaskLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  done      Boolean
  taskIndex Int // start from 0

  intentLogId String      @db.ObjectId
  intentLog   IntentLog   @relation(fields: [intentLogId], references: [id])
  actionLogs  ActionLog[]

  @@map("taskLog")
}

model ActionLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  name        String
  project     String
  actionIndex Int // start from 0

  inputTokenIds  String[]
  inputAmounts   Float[]
  inputUSD       Float
  outputTokenIds String[]
  outputAmounts  Float[]
  outputUSD      Float

  txHash  String?
  gasUsed String?
  gasUSD  Float?

  taskLogId String  @db.ObjectId
  taskLog   TaskLog @relation(fields: [taskLogId], references: [id])

  @@map("actionLog")
}
